#!/bin/bash

<<COMMENT
Input:
1. structure.pdb
COMMENT

#Generate Symmetry Defintion File (5 subunites in cycle type symmetry):
{ROSETTA}/main/source/src/apps/public/symmetry/make_symmdef_file_denovo.py -symm_type cn -nsub 5 > symmetry.sym

#Generate The flags File:
echo '
-in:file:s structure.pdb
-ignore_unrecognized_res

# symmetry options
-symmetry:symmetry_definition input_files/C3.symm_example	# This is the location of the symmetry definition file
-symmetry:initialize_rigid_body_dofs				# Initialize the rigid body positions of the subunits according to the symmetry definition file
-symmetry:symmetric_rmsd					# Calculate a symmmetric rmsd. # Necessary because we have 3 chains.

# packing optinos
-packing:ex1
-packing:ex2aro

# output options
-out:nstruct 1
-out:file:fullatom
'>flags

#Run Symmetry:
{ROSETTA}/main/source/bin/SymDock.default.linuxgccrelease @flags -symmetry:symmetry_definition symmetry.sym





















































































#Anchor Protein



#Combine structure.pdb and anchor.pdb into both.pdb:
cat anchor.pdb structure_sym.pdb > both.pdb

#Ready Made symmetry definition file:
echo '
symmetry_name C5
subunits 5
number_of_interfaces 4
E = 2*S1  + 1*(S1:S2) + 1*(S1:S3) + 1*(S1:S4) + 1*(S1:S5)
anchor_residue 1
virtual_coordinates_start
xyz S1 0,0,1 +0.0000000,+1.0000000,0 0,0,0
xyz S2 0,0,1 +0.9510565,+0.3090170,0 0,0,0
xyz S3 0,0,1 +0.5877853,-0.8090170,0 0,0,0
xyz S4 0,0,1 -0.5877853,-0.8090170,0 0,0,0
xyz S5 0,0,1 -0.9510565,+0.3090170,0 0,0,0
virtual_coordinates_stop
connect_virtual J2 S1 S2
connect_virtual J3 S1 S3
connect_virtual J4 S1 S4
connect_virtual J5 S1 S5
connect_virtual JS1 S1 SUBUNIT
connect_virtual JS2 S2 SUBUNIT
connect_virtual JS3 S3 SUBUNIT
connect_virtual JS4 S4 SUBUNIT
connect_virtual JS5 S5 SUBUNIT
set_dof JS1 x y angle_x angle_y angle_z
set_jump_group GJS JS1 JS2 JS3 JS4 JS5
'>Symmetry.sym

#Flags file:
echo '
desc="trapdoor_2l_$1"
input="both.pdb"
linker=10

/app/biology/Rosetta_3.7/main/source/bin/remodel.default.linuxgccrelease \
	-s $input \
	-remodel:blueprint input_$linker.bp \
	-no_jumps \
    -cst_file input_$linker.cst \
    -cstfilter 1000 \
	-symmetry_definition Symmetry.sym \
	-num_trajectory 200 \
	-save_top 10 \
	-out:prefix $desc \
	-remodel:use_pose_relax true \
	-chain A \
	-out:path:all $desc \
	-overwrite \
	-no_optH false -ex1 -ex2 \
	-jd2:no_output \
    -out:nooutput true
'>run.sh
chmod 775 run.sh

#Generate the blueprint (input_10.bp) and constraint (input_10.cst) files:
#usage: perl make_cst.pl [structure.pdb(asu)] [anchor.pdb(symmetrized)] [link_start] [link_stop] [%(in decimals)] [symmetry_fold]
#201 is the end of the structure.pdb
#202 is the start of the anchor.pdb
perl make_cst.pl both.pdb structure.pdb 201 202 1 I










./run.sh
